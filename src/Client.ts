/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { Agent } from "./api/resources/agent/client/Client.js";
import { Authtoken } from "./api/resources/authtoken/client/Client.js";
import { Cohort } from "./api/resources/cohort/client/Client.js";
import { Construe } from "./api/resources/construe/client/Client.js";
import { Lang2Fhir } from "./api/resources/lang2Fhir/client/Client.js";
import { Tools } from "./api/resources/tools/client/Client.js";

export declare namespace phenomlClient {
    export interface Options {
        environment?: core.Supplier<environments.phenomlEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class phenomlClient {
    protected readonly _options: phenomlClient.Options;
    protected _agent: Agent | undefined;
    protected _authtoken: Authtoken | undefined;
    protected _cohort: Cohort | undefined;
    protected _construe: Construe | undefined;
    protected _lang2Fhir: Lang2Fhir | undefined;
    protected _tools: Tools | undefined;

    constructor(_options: phenomlClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "phenoml",
                    "X-Fern-SDK-Version": "0.0.11",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get agent(): Agent {
        return (this._agent ??= new Agent(this._options));
    }

    public get authtoken(): Authtoken {
        return (this._authtoken ??= new Authtoken(this._options));
    }

    public get cohort(): Cohort {
        return (this._cohort ??= new Cohort(this._options));
    }

    public get construe(): Construe {
        return (this._construe ??= new Construe(this._options));
    }

    public get lang2Fhir(): Lang2Fhir {
        return (this._lang2Fhir ??= new Lang2Fhir(this._options));
    }

    public get tools(): Tools {
        return (this._tools ??= new Tools(this._options));
    }
}
