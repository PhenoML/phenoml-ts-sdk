/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments.js";
import * as core from "../../../../../../../../core/index.js";
import * as phenoml from "../../../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../../../core/headers.js";
import * as errors from "../../../../../../../../errors/index.js";

export declare namespace Tools {
    export interface Options {
        environment?: core.Supplier<environments.phenomlEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Tools {
    protected readonly _options: Tools.Options;

    constructor(_options: Tools.Options) {
        this._options = _options;
    }

    /**
     * Lists all MCP server tools for a specific MCP server
     *
     * @param {string} mcpServerId - ID of the MCP server to list tools for
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.tools.UnauthorizedError}
     * @throws {@link phenoml.tools.ForbiddenError}
     * @throws {@link phenoml.tools.InternalServerError}
     *
     * @example
     *     await client.tools.mcpServer.tools.list("mcp_server_id")
     */
    public list(
        mcpServerId: string,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<phenoml.tools.McpServerToolResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(mcpServerId, requestOptions));
    }

    private async __list(
        mcpServerId: string,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.tools.McpServerToolResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `tools/mcp-server/${encodeURIComponent(mcpServerId)}/list`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.tools.McpServerToolResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new phenoml.tools.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.tools.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.tools.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError(
                    "Timeout exceeded when calling GET /tools/mcp-server/{mcp_server_id}/list.",
                );
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Gets a MCP server tool by ID
     *
     * @param {string} mcpServerToolId - ID of the MCP server tool to retrieve
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.tools.UnauthorizedError}
     * @throws {@link phenoml.tools.ForbiddenError}
     * @throws {@link phenoml.tools.InternalServerError}
     *
     * @example
     *     await client.tools.mcpServer.tools.get("mcp_server_tool_id")
     */
    public get(
        mcpServerToolId: string,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<phenoml.tools.McpServerToolResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(mcpServerToolId, requestOptions));
    }

    private async __get(
        mcpServerToolId: string,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.tools.McpServerToolResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `tools/mcp-server/tool/${encodeURIComponent(mcpServerToolId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.tools.McpServerToolResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new phenoml.tools.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.tools.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.tools.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError(
                    "Timeout exceeded when calling GET /tools/mcp-server/tool/{mcp_server_tool_id}.",
                );
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a MCP server tool by ID
     *
     * @param {string} mcpServerToolId - ID of the MCP server tool to delete
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.tools.UnauthorizedError}
     * @throws {@link phenoml.tools.ForbiddenError}
     * @throws {@link phenoml.tools.InternalServerError}
     *
     * @example
     *     await client.tools.mcpServer.tools.delete("mcp_server_tool_id")
     */
    public delete(
        mcpServerToolId: string,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<phenoml.tools.McpServerToolResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(mcpServerToolId, requestOptions));
    }

    private async __delete(
        mcpServerToolId: string,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.tools.McpServerToolResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `tools/mcp-server/tool/${encodeURIComponent(mcpServerToolId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.tools.McpServerToolResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new phenoml.tools.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.tools.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.tools.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError(
                    "Timeout exceeded when calling DELETE /tools/mcp-server/tool/{mcp_server_tool_id}.",
                );
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Calls a MCP server tool
     *
     * @param {string} mcpServerToolId - ID of the MCP server tool to call
     * @param {phenoml.tools.mcpServer.McpServerToolCallRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.tools.BadRequestError}
     * @throws {@link phenoml.tools.UnauthorizedError}
     * @throws {@link phenoml.tools.ForbiddenError}
     * @throws {@link phenoml.tools.InternalServerError}
     *
     * @example
     *     await client.tools.mcpServer.tools.call("mcp_server_tool_id", {
     *         arguments: {
     *             "title": "PhenoML Agent API"
     *         }
     *     })
     */
    public call(
        mcpServerToolId: string,
        request: phenoml.tools.mcpServer.McpServerToolCallRequest,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<phenoml.tools.McpServerToolCallResponse> {
        return core.HttpResponsePromise.fromPromise(this.__call(mcpServerToolId, request, requestOptions));
    }

    private async __call(
        mcpServerToolId: string,
        request: phenoml.tools.mcpServer.McpServerToolCallRequest,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.tools.McpServerToolCallResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `tools/mcp-server/tool/${encodeURIComponent(mcpServerToolId)}/call`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as phenoml.tools.McpServerToolCallResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.tools.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.tools.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.tools.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.tools.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError(
                    "Timeout exceeded when calling POST /tools/mcp-server/tool/{mcp_server_tool_id}/call.",
                );
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
