/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as phenoml from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Tools {
    export interface Options {
        environment?: core.Supplier<environments.phenomlEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        username: core.Supplier<string>;
        password: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Tools {
    protected readonly _options: Tools.Options;

    constructor(_options: Tools.Options) {
        this._options = _options;
    }

    /**
     * Converts natural language to FHIR resource and optionally stores it in a FHIR server
     *
     * @param {phenoml.tools.Lang2FhirAndCreateRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.tools.BadRequestError}
     * @throws {@link phenoml.tools.UnauthorizedError}
     * @throws {@link phenoml.tools.ForbiddenError}
     * @throws {@link phenoml.tools.FailedDependencyError}
     * @throws {@link phenoml.tools.InternalServerError}
     *
     * @example
     *     await client.tools.createFhirResource({
     *         resource: "auto",
     *         text: "Patient John Doe has severe asthma with acute exacerbation"
     *     })
     */
    public createFhirResource(
        request: phenoml.tools.Lang2FhirAndCreateRequest,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<phenoml.tools.Lang2FhirAndCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createFhirResource(request, requestOptions));
    }

    private async __createFhirResource(
        request: phenoml.tools.Lang2FhirAndCreateRequest,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.tools.Lang2FhirAndCreateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "tools/lang2fhir-and-create",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as phenoml.tools.Lang2FhirAndCreateResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.tools.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.tools.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.tools.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 424:
                    throw new phenoml.tools.FailedDependencyError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new phenoml.tools.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /tools/lang2fhir-and-create.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Converts natural language to FHIR search parameters and executes search in FHIR server
     *
     * @param {phenoml.tools.Lang2FhirAndSearchRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.tools.BadRequestError}
     * @throws {@link phenoml.tools.UnauthorizedError}
     * @throws {@link phenoml.tools.ForbiddenError}
     * @throws {@link phenoml.tools.FailedDependencyError}
     * @throws {@link phenoml.tools.InternalServerError}
     *
     * @example
     *     await client.tools.searchFhirResources({
     *         text: "Find all appointments for patient John Doe next week"
     *     })
     */
    public searchFhirResources(
        request: phenoml.tools.Lang2FhirAndSearchRequest,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<phenoml.tools.Lang2FhirAndSearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__searchFhirResources(request, requestOptions));
    }

    private async __searchFhirResources(
        request: phenoml.tools.Lang2FhirAndSearchRequest,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.tools.Lang2FhirAndSearchResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "tools/lang2fhir-and-search",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as phenoml.tools.Lang2FhirAndSearchResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.tools.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.tools.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.tools.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 424:
                    throw new phenoml.tools.FailedDependencyError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new phenoml.tools.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /tools/lang2fhir-and-search.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Uses LLM to extract search concepts from natural language and builds patient cohorts with inclusion/exclusion criteria
     *
     * @param {phenoml.tools.CohortRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.tools.BadRequestError}
     * @throws {@link phenoml.tools.UnauthorizedError}
     * @throws {@link phenoml.tools.ForbiddenError}
     * @throws {@link phenoml.tools.InternalServerError}
     *
     * @example
     *     await client.tools.analyzeCohort({
     *         text: "female patients over 20 with diabetes but not hypertension",
     *         provider: "medplum"
     *     })
     */
    public analyzeCohort(
        request: phenoml.tools.CohortRequest,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<phenoml.tools.CohortResponse> {
        return core.HttpResponsePromise.fromPromise(this.__analyzeCohort(request, requestOptions));
    }

    private async __analyzeCohort(
        request: phenoml.tools.CohortRequest,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.tools.CohortResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "tools/cohort",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.tools.CohortResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.tools.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.tools.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.tools.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.tools.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /tools/cohort.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        return core.BasicAuth.toAuthorizationHeader({
            username: await core.Supplier.get(this._options.username),
            password: await core.Supplier.get(this._options.password),
        });
    }
}
