/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as phenoml from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Lang2Fhir {
    export interface Options {
        environment?: core.Supplier<environments.phenomlEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        username: core.Supplier<string>;
        password: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Lang2Fhir {
    protected readonly _options: Lang2Fhir.Options;

    constructor(_options: Lang2Fhir.Options) {
        this._options = _options;
    }

    /**
     * Converts natural language text into a structured FHIR resource
     *
     * @param {phenoml.lang2Fhir.CreateRequest} request
     * @param {Lang2Fhir.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.lang2Fhir.BadRequestError}
     * @throws {@link phenoml.lang2Fhir.UnauthorizedError}
     * @throws {@link phenoml.lang2Fhir.InternalServerError}
     *
     * @example
     *     await client.lang2Fhir.create({
     *         version: "R4",
     *         resource: "auto",
     *         text: "Patient has severe asthma with acute exacerbation"
     *     })
     */
    public create(
        request: phenoml.lang2Fhir.CreateRequest,
        requestOptions?: Lang2Fhir.RequestOptions,
    ): core.HttpResponsePromise<phenoml.lang2Fhir.FhirResource> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: phenoml.lang2Fhir.CreateRequest,
        requestOptions?: Lang2Fhir.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.lang2Fhir.FhirResource>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "lang2fhir/create",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.lang2Fhir.FhirResource, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.lang2Fhir.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.lang2Fhir.UnauthorizedError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new phenoml.lang2Fhir.InternalServerError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /lang2fhir/create.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Converts natural language text into FHIR search parameters
     *
     * @param {phenoml.lang2Fhir.SearchRequest} request
     * @param {Lang2Fhir.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.lang2Fhir.BadRequestError}
     * @throws {@link phenoml.lang2Fhir.UnauthorizedError}
     * @throws {@link phenoml.lang2Fhir.FailedDependencyError}
     * @throws {@link phenoml.lang2Fhir.InternalServerError}
     *
     * @example
     *     await client.lang2Fhir.search({
     *         text: "Appointments between March 2-9, 2025"
     *     })
     */
    public search(
        request: phenoml.lang2Fhir.SearchRequest,
        requestOptions?: Lang2Fhir.RequestOptions,
    ): core.HttpResponsePromise<phenoml.lang2Fhir.SearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__search(request, requestOptions));
    }

    private async __search(
        request: phenoml.lang2Fhir.SearchRequest,
        requestOptions?: Lang2Fhir.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.lang2Fhir.SearchResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "lang2fhir/search",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.lang2Fhir.SearchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.lang2Fhir.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.lang2Fhir.UnauthorizedError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 424:
                    throw new phenoml.lang2Fhir.FailedDependencyError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new phenoml.lang2Fhir.InternalServerError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /lang2fhir/search.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Upload a custom FHIR StructureDefinition profile for use with the lang2fhir service
     *
     * @param {phenoml.lang2Fhir.ProfileUploadRequest} request
     * @param {Lang2Fhir.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.lang2Fhir.BadRequestError}
     * @throws {@link phenoml.lang2Fhir.UnauthorizedError}
     * @throws {@link phenoml.lang2Fhir.ForbiddenError}
     * @throws {@link phenoml.lang2Fhir.InternalServerError}
     *
     * @example
     *     await client.lang2Fhir.uploadProfile({
     *         version: "version",
     *         resource: "custom-patient",
     *         profile: "profile"
     *     })
     */
    public uploadProfile(
        request: phenoml.lang2Fhir.ProfileUploadRequest,
        requestOptions?: Lang2Fhir.RequestOptions,
    ): core.HttpResponsePromise<phenoml.lang2Fhir.Lang2FhirUploadProfileResponse> {
        return core.HttpResponsePromise.fromPromise(this.__uploadProfile(request, requestOptions));
    }

    private async __uploadProfile(
        request: phenoml.lang2Fhir.ProfileUploadRequest,
        requestOptions?: Lang2Fhir.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.lang2Fhir.Lang2FhirUploadProfileResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "lang2fhir/profile/upload",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as phenoml.lang2Fhir.Lang2FhirUploadProfileResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.lang2Fhir.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.lang2Fhir.UnauthorizedError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 403:
                    throw new phenoml.lang2Fhir.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.lang2Fhir.InternalServerError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /lang2fhir/profile/upload.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Extracts text from a document (PDF or image) and converts it into a structured FHIR resource
     *
     * @param {phenoml.lang2Fhir.DocumentRequest} request
     * @param {Lang2Fhir.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.lang2Fhir.BadRequestError}
     * @throws {@link phenoml.lang2Fhir.UnauthorizedError}
     * @throws {@link phenoml.lang2Fhir.InternalServerError}
     *
     * @example
     *     await client.lang2Fhir.document({
     *         version: "R4",
     *         resource: "questionnaire",
     *         content: "content",
     *         fileType: "application/pdf"
     *     })
     */
    public document(
        request: phenoml.lang2Fhir.DocumentRequest,
        requestOptions?: Lang2Fhir.RequestOptions,
    ): core.HttpResponsePromise<phenoml.lang2Fhir.FhirResource> {
        return core.HttpResponsePromise.fromPromise(this.__document(request, requestOptions));
    }

    private async __document(
        request: phenoml.lang2Fhir.DocumentRequest,
        requestOptions?: Lang2Fhir.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.lang2Fhir.FhirResource>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "lang2fhir/document",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.lang2Fhir.FhirResource, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.lang2Fhir.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.lang2Fhir.UnauthorizedError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new phenoml.lang2Fhir.InternalServerError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /lang2fhir/document.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        return core.BasicAuth.toAuthorizationHeader({
            username: await core.Supplier.get(this._options.username),
            password: await core.Supplier.get(this._options.password),
        });
    }
}
