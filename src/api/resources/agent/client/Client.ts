/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as phenoml from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import { Prompts } from "../resources/prompts/client/Client.js";

export declare namespace Agent {
    export interface Options {
        environment?: core.Supplier<environments.phenomlEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Agent {
    protected readonly _options: Agent.Options;
    protected _prompts: Prompts | undefined;

    constructor(_options: Agent.Options) {
        this._options = _options;
    }

    public get prompts(): Prompts {
        return (this._prompts ??= new Prompts(this._options));
    }

    /**
     * Creates a new PhenoAgent with specified configuration
     *
     * @param {phenoml.agent.AgentCreateRequest} request
     * @param {Agent.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.BadRequestError}
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.create({
     *         name: "name",
     *         prompts: ["prompt_123", "prompt_456"],
     *         is_active: true
     *     })
     */
    public create(
        request: phenoml.agent.AgentCreateRequest,
        requestOptions?: Agent.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: phenoml.agent.AgentCreateRequest,
        requestOptions?: Agent.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "agent/create",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.AgentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.agent.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /agent/create.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a list of PhenoAgents belonging to the authenticated user
     *
     * @param {phenoml.agent.AgentListRequest} request
     * @param {Agent.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.list()
     */
    public list(
        request: phenoml.agent.AgentListRequest = {},
        requestOptions?: Agent.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: phenoml.agent.AgentListRequest = {},
        requestOptions?: Agent.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentListResponse>> {
        const { is_active: isActive, tags } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (isActive != null) {
            _queryParams["is_active"] = isActive.toString();
        }

        if (tags != null) {
            _queryParams["tags"] = tags;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "agent/list",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.AgentListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling GET /agent/list.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a specific agent by its ID
     *
     * @param {string} id - Agent ID
     * @param {Agent.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.NotFoundError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.get("id")
     */
    public get(
        id: string,
        requestOptions?: Agent.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Agent.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `agent/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.AgentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new phenoml.agent.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling GET /agent/{id}.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates an existing agent's configuration
     *
     * @param {string} id - Agent ID
     * @param {phenoml.agent.AgentUpdateRequest} request
     * @param {Agent.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.BadRequestError}
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.NotFoundError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.update("id")
     */
    public update(
        id: string,
        request: phenoml.agent.AgentUpdateRequest = {},
        requestOptions?: Agent.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: phenoml.agent.AgentUpdateRequest = {},
        requestOptions?: Agent.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `agent/${encodeURIComponent(id)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.AgentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.agent.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new phenoml.agent.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling PUT /agent/{id}.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes an existing agent
     *
     * @param {string} id - Agent ID
     * @param {Agent.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.NotFoundError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.delete("id")
     */
    public delete(
        id: string,
        requestOptions?: Agent.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: Agent.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentDeleteResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `agent/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.AgentDeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new phenoml.agent.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling DELETE /agent/{id}.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Patches an existing agent's configuration
     *
     * @param {string} id - Agent ID
     * @param {phenoml.agent.JsonPatch} request
     * @param {Agent.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.BadRequestError}
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.NotFoundError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.patch("id", [{
     *             op: "replace",
     *             path: "/name",
     *             value: "Updated Agent Name"
     *         }, {
     *             op: "add",
     *             path: "/tags/-",
     *             value: "new-tag"
     *         }, {
     *             op: "remove",
     *             path: "/description"
     *         }])
     */
    public patch(
        id: string,
        request: phenoml.agent.JsonPatch,
        requestOptions?: Agent.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__patch(id, request, requestOptions));
    }

    private async __patch(
        id: string,
        request: phenoml.agent.JsonPatch,
        requestOptions?: Agent.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `agent/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json+patch",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.AgentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.agent.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new phenoml.agent.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling PATCH /agent/{id}.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Send a message to an agent and receive a response
     *
     * @param {phenoml.agent.AgentChatRequest} request
     * @param {Agent.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.BadRequestError}
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.chat({
     *         message: "What is the patient's current condition?",
     *         agent_id: "agent-123"
     *     })
     */
    public chat(
        request: phenoml.agent.AgentChatRequest,
        requestOptions?: Agent.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentChatResponse> {
        return core.HttpResponsePromise.fromPromise(this.__chat(request, requestOptions));
    }

    private async __chat(
        request: phenoml.agent.AgentChatRequest,
        requestOptions?: Agent.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentChatResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "agent/chat",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.AgentChatResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.agent.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /agent/chat.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a list of chat messages for a given chat session
     *
     * @param {phenoml.agent.AgentGetChatMessagesRequest} request
     * @param {Agent.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.getChatMessages({
     *         chat_session_id: "chat_session_id"
     *     })
     */
    public getChatMessages(
        request: phenoml.agent.AgentGetChatMessagesRequest,
        requestOptions?: Agent.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentGetChatMessagesResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getChatMessages(request, requestOptions));
    }

    private async __getChatMessages(
        request: phenoml.agent.AgentGetChatMessagesRequest,
        requestOptions?: Agent.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentGetChatMessagesResponse>> {
        const { chat_session_id: chatSessionId, num_messages: numMessages, role, order } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["chat_session_id"] = chatSessionId;
        if (numMessages != null) {
            _queryParams["num_messages"] = numMessages.toString();
        }

        if (role != null) {
            _queryParams["role"] = role;
        }

        if (order != null) {
            _queryParams["order"] = order;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "agent/chat/messages",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as phenoml.agent.AgentGetChatMessagesResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling GET /agent/chat/messages.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
