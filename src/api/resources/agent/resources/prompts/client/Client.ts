/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as phenoml from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Prompts {
    export interface Options {
        environment?: core.Supplier<environments.phenomlEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        username: core.Supplier<string>;
        password: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Prompts {
    protected readonly _options: Prompts.Options;

    constructor(_options: Prompts.Options) {
        this._options = _options;
    }

    /**
     * Retrieves a list of agent prompts belonging to the authenticated user
     *
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.prompts.list()
     */
    public list(requestOptions?: Prompts.RequestOptions): core.HttpResponsePromise<phenoml.agent.PromptsListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(
        requestOptions?: Prompts.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.PromptsListResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "agent/prompts",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.PromptsListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling GET /agent/prompts.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new agent prompt
     *
     * @param {phenoml.agent.AgentPromptsCreateRequest} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.BadRequestError}
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.prompts.create({
     *         name: "Medical Assistant System Prompt",
     *         content: "You are a helpful medical assistant specialized in FHIR data processing...",
     *         is_active: true
     *     })
     */
    public create(
        request: phenoml.agent.AgentPromptsCreateRequest,
        requestOptions?: Prompts.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentPromptsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: phenoml.agent.AgentPromptsCreateRequest,
        requestOptions?: Prompts.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentPromptsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "agent/prompts",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.AgentPromptsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.agent.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /agent/prompts.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a specific prompt by its ID
     *
     * @param {string} id - Prompt ID
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.NotFoundError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.prompts.get("id")
     */
    public get(
        id: string,
        requestOptions?: Prompts.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentPromptsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Prompts.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentPromptsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `agent/prompts/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.AgentPromptsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new phenoml.agent.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling GET /agent/prompts/{id}.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates an existing prompt
     *
     * @param {string} id - Prompt ID
     * @param {phenoml.agent.AgentPromptsUpdateRequest} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.BadRequestError}
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.NotFoundError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.prompts.update("id")
     */
    public update(
        id: string,
        request: phenoml.agent.AgentPromptsUpdateRequest = {},
        requestOptions?: Prompts.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentPromptsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: phenoml.agent.AgentPromptsUpdateRequest = {},
        requestOptions?: Prompts.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentPromptsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `agent/prompts/${encodeURIComponent(id)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.AgentPromptsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.agent.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new phenoml.agent.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling PUT /agent/prompts/{id}.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Soft deletes a prompt by setting is_active to false
     *
     * @param {string} id - Prompt ID
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.NotFoundError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.prompts.delete("id")
     */
    public delete(
        id: string,
        requestOptions?: Prompts.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.PromptsDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: Prompts.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.PromptsDeleteResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `agent/prompts/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.PromptsDeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new phenoml.agent.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling DELETE /agent/prompts/{id}.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Patches an existing prompt
     *
     * @param {string} id - Agent Prompt ID
     * @param {phenoml.agent.JsonPatch} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.BadRequestError}
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.NotFoundError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.prompts.patch("id", [{
     *             op: "replace",
     *             path: "/name",
     *             value: "Updated Agent Name"
     *         }, {
     *             op: "add",
     *             path: "/tags/-",
     *             value: "new-tag"
     *         }, {
     *             op: "remove",
     *             path: "/description"
     *         }])
     */
    public patch(
        id: string,
        request: phenoml.agent.JsonPatch,
        requestOptions?: Prompts.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.AgentPromptsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__patch(id, request, requestOptions));
    }

    private async __patch(
        id: string,
        request: phenoml.agent.JsonPatch,
        requestOptions?: Prompts.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.AgentPromptsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                `agent/prompts/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json+patch",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.AgentPromptsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.agent.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new phenoml.agent.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling PATCH /agent/prompts/{id}.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Loads default agent prompts for the authenticated user
     *
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.agent.UnauthorizedError}
     * @throws {@link phenoml.agent.ForbiddenError}
     * @throws {@link phenoml.agent.InternalServerError}
     *
     * @example
     *     await client.agent.prompts.loadDefaults()
     */
    public loadDefaults(
        requestOptions?: Prompts.RequestOptions,
    ): core.HttpResponsePromise<phenoml.agent.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__loadDefaults(requestOptions));
    }

    private async __loadDefaults(
        requestOptions?: Prompts.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.agent.SuccessResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "agent/prompts/load-defaults",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.agent.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new phenoml.agent.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new phenoml.agent.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new phenoml.agent.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError(
                    "Timeout exceeded when calling POST /agent/prompts/load-defaults.",
                );
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        return core.BasicAuth.toAuthorizationHeader({
            username: await core.Supplier.get(this._options.username),
            password: await core.Supplier.get(this._options.password),
        });
    }
}
