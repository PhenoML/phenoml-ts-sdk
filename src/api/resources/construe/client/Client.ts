/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as phenoml from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Construe {
    export interface Options {
        environment?: core.Supplier<environments.phenomlEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Construe {
    protected readonly _options: Construe.Options;

    constructor(_options: Construe.Options) {
        this._options = _options;
    }

    /**
     * Upload a custom medical code system with codes and descriptions for use in code extraction.
     * Upon upload, construe generates embeddings for all of the codes in the code system and stores them in the vector database so you can
     * subsequently use the code system for construe/extract and lang2fhir/create (coming soon!)
     *
     * @param {phenoml.construe.UploadRequest} request
     * @param {Construe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.construe.BadRequestError}
     * @throws {@link phenoml.construe.UnauthorizedError}
     * @throws {@link phenoml.construe.ConflictError}
     * @throws {@link phenoml.construe.FailedDependencyError}
     * @throws {@link phenoml.construe.InternalServerError}
     *
     * @example
     *     await client.construe.uploadCodeSystem({
     *         name: "CUSTOM_CODES",
     *         version: "1.0",
     *         format: "json",
     *         file: "file"
     *     })
     */
    public uploadCodeSystem(
        request: phenoml.construe.UploadRequest,
        requestOptions?: Construe.RequestOptions,
    ): core.HttpResponsePromise<phenoml.construe.ConstrueUploadCodeSystemResponse> {
        return core.HttpResponsePromise.fromPromise(this.__uploadCodeSystem(request, requestOptions));
    }

    private async __uploadCodeSystem(
        request: phenoml.construe.UploadRequest,
        requestOptions?: Construe.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.construe.ConstrueUploadCodeSystemResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "construe/upload",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as phenoml.construe.ConstrueUploadCodeSystemResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.construe.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.construe.UnauthorizedError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 409:
                    throw new phenoml.construe.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 424:
                    throw new phenoml.construe.FailedDependencyError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new phenoml.construe.InternalServerError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /construe/upload.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Converts natural language text into structured medical codes
     *
     * @param {phenoml.construe.ExtractRequest} request
     * @param {Construe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.construe.BadRequestError}
     * @throws {@link phenoml.construe.UnauthorizedError}
     * @throws {@link phenoml.construe.FailedDependencyError}
     * @throws {@link phenoml.construe.InternalServerError}
     *
     * @example
     *     await client.construe.extractCodes({
     *         text: "Patient is a 14-year-old female, previously healthy, who is here for evaluation of abnormal renal ultrasound with atrophic right kidney"
     *     })
     */
    public extractCodes(
        request: phenoml.construe.ExtractRequest,
        requestOptions?: Construe.RequestOptions,
    ): core.HttpResponsePromise<phenoml.construe.ExtractCodesResult> {
        return core.HttpResponsePromise.fromPromise(this.__extractCodes(request, requestOptions));
    }

    private async __extractCodes(
        request: phenoml.construe.ExtractRequest,
        requestOptions?: Construe.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.construe.ExtractCodesResult>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "construe/extract",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as phenoml.construe.ExtractCodesResult, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.construe.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.construe.UnauthorizedError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 424:
                    throw new phenoml.construe.FailedDependencyError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new phenoml.construe.InternalServerError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /construe/extract.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a patient cohort based on a natural language description.
     * Translates the description into FHIR search queries and optional SQL queries.
     *
     * @param {phenoml.construe.ConstrueCohortRequest} request
     * @param {Construe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link phenoml.construe.BadRequestError}
     * @throws {@link phenoml.construe.UnauthorizedError}
     * @throws {@link phenoml.construe.InternalServerError}
     *
     * @example
     *     await client.construe.cohort({
     *         text: "Between 20 and 40 years old with hyperlipidemia"
     *     })
     */
    public cohort(
        request: phenoml.construe.ConstrueCohortRequest,
        requestOptions?: Construe.RequestOptions,
    ): core.HttpResponsePromise<phenoml.construe.ConstrueCohortResponse> {
        return core.HttpResponsePromise.fromPromise(this.__cohort(request, requestOptions));
    }

    private async __cohort(
        request: phenoml.construe.ConstrueCohortRequest,
        requestOptions?: Construe.RequestOptions,
    ): Promise<core.WithRawResponse<phenoml.construe.ConstrueCohortResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.phenomlEnvironment.Default,
                "construe/cohort",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as phenoml.construe.ConstrueCohortResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new phenoml.construe.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new phenoml.construe.UnauthorizedError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new phenoml.construe.InternalServerError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.phenomlError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.phenomlError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.phenomlTimeoutError("Timeout exceeded when calling POST /construe/cohort.");
            case "unknown":
                throw new errors.phenomlError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
