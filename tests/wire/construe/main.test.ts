/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { phenomlClient } from "../../../src/Client";

describe("Construe", () => {
    test("uploadCodeSystem", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "CUSTOM_CODES", version: "1.0", format: "json", file: "file" };
        const rawResponseBody = { status: "success" };
        server
            .mockEndpoint()
            .post("/construe/upload")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.construe.uploadCodeSystem({
            name: "CUSTOM_CODES",
            version: "1.0",
            format: "json",
            file: "file",
        });
        expect(response).toEqual({
            status: "success",
        });
    });

    test("extractCodes", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            text: "Patient is a 14-year-old female, previously healthy, who is here for evaluation of abnormal renal ultrasound with atrophic right kidney",
        };
        const rawResponseBody = {
            system: { name: "SNOMED_CT_US_LITE", version: "20240901" },
            codes: [
                {
                    code: "195967001",
                    description: "Asthma",
                    longDescription: "longDescription",
                    rationale: "rationale",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/construe/extract")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.construe.extractCodes({
            text: "Patient is a 14-year-old female, previously healthy, who is here for evaluation of abnormal renal ultrasound with atrophic right kidney",
        });
        expect(response).toEqual({
            system: {
                name: "SNOMED_CT_US_LITE",
                version: "20240901",
            },
            codes: [
                {
                    code: "195967001",
                    description: "Asthma",
                    longDescription: "longDescription",
                    rationale: "rationale",
                },
            ],
        });
    });

    test("cohort", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "Between 20 and 40 years old with hyperlipidemia" };
        const rawResponseBody = {
            queries: [
                {
                    resource: "resource",
                    searchParams: "searchParams",
                    exclude: true,
                    rationale: "rationale",
                    codeExtractResults: [{}],
                },
            ],
            sql: "sql",
            cohortDescription: "cohortDescription",
        };
        server
            .mockEndpoint()
            .post("/construe/cohort")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.construe.cohort({
            text: "Between 20 and 40 years old with hyperlipidemia",
        });
        expect(response).toEqual({
            queries: [
                {
                    resource: "resource",
                    searchParams: "searchParams",
                    exclude: true,
                    rationale: "rationale",
                    codeExtractResults: [{}],
                },
            ],
            sql: "sql",
            cohortDescription: "cohortDescription",
        });
    });
});
