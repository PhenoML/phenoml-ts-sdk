/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { phenomlClient } from "../../../src/Client";

describe("Prompts", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "Prompts retrieved successfully",
            prompts: [
                {
                    id: "prompt_123",
                    name: "Medical Assistant System Prompt",
                    description: "System prompt for medical assistant agent",
                    content: "You are a helpful medical assistant...",
                    is_default: false,
                    is_active: true,
                    tags: ["medical", "system"],
                },
            ],
        };
        server.mockEndpoint().get("/agent/prompts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agent.prompts.list();
        expect(response).toEqual({
            success: true,
            message: "Prompts retrieved successfully",
            prompts: [
                {
                    id: "prompt_123",
                    name: "Medical Assistant System Prompt",
                    description: "System prompt for medical assistant agent",
                    content: "You are a helpful medical assistant...",
                    is_default: false,
                    is_active: true,
                    tags: ["medical", "system"],
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "Medical Assistant System Prompt",
            content: "You are a helpful medical assistant specialized in FHIR data processing...",
            is_active: true,
        };
        const rawResponseBody = {
            success: true,
            message: "Prompt created successfully",
            data: {
                id: "prompt_123",
                name: "Medical Assistant System Prompt",
                description: "System prompt for medical assistant agent",
                content: "You are a helpful medical assistant...",
                is_default: false,
                is_active: true,
                tags: ["medical", "system"],
            },
        };
        server
            .mockEndpoint()
            .post("/agent/prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agent.prompts.create({
            name: "Medical Assistant System Prompt",
            content: "You are a helpful medical assistant specialized in FHIR data processing...",
            is_active: true,
        });
        expect(response).toEqual({
            success: true,
            message: "Prompt created successfully",
            data: {
                id: "prompt_123",
                name: "Medical Assistant System Prompt",
                description: "System prompt for medical assistant agent",
                content: "You are a helpful medical assistant...",
                is_default: false,
                is_active: true,
                tags: ["medical", "system"],
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "Prompt created successfully",
            data: {
                id: "prompt_123",
                name: "Medical Assistant System Prompt",
                description: "System prompt for medical assistant agent",
                content: "You are a helpful medical assistant...",
                is_default: false,
                is_active: true,
                tags: ["medical", "system"],
            },
        };
        server.mockEndpoint().get("/agent/prompts/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agent.prompts.get("id");
        expect(response).toEqual({
            success: true,
            message: "Prompt created successfully",
            data: {
                id: "prompt_123",
                name: "Medical Assistant System Prompt",
                description: "System prompt for medical assistant agent",
                content: "You are a helpful medical assistant...",
                is_default: false,
                is_active: true,
                tags: ["medical", "system"],
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            success: true,
            message: "Prompt created successfully",
            data: {
                id: "prompt_123",
                name: "Medical Assistant System Prompt",
                description: "System prompt for medical assistant agent",
                content: "You are a helpful medical assistant...",
                is_default: false,
                is_active: true,
                tags: ["medical", "system"],
            },
        };
        server
            .mockEndpoint()
            .put("/agent/prompts/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agent.prompts.update("id");
        expect(response).toEqual({
            success: true,
            message: "Prompt created successfully",
            data: {
                id: "prompt_123",
                name: "Medical Assistant System Prompt",
                description: "System prompt for medical assistant agent",
                content: "You are a helpful medical assistant...",
                is_default: false,
                is_active: true,
                tags: ["medical", "system"],
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, message: "Prompt deleted successfully" };
        server
            .mockEndpoint()
            .delete("/agent/prompts/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agent.prompts.delete("id");
        expect(response).toEqual({
            success: true,
            message: "Prompt deleted successfully",
        });
    });

    test("patch", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = [
            { op: "replace", path: "/name", value: "Updated Agent Name" },
            { op: "add", path: "/tags/-", value: "new-tag" },
            { op: "remove", path: "/description" },
        ];
        const rawResponseBody = {
            success: true,
            message: "Prompt created successfully",
            data: {
                id: "prompt_123",
                name: "Medical Assistant System Prompt",
                description: "System prompt for medical assistant agent",
                content: "You are a helpful medical assistant...",
                is_default: false,
                is_active: true,
                tags: ["medical", "system"],
            },
        };
        server
            .mockEndpoint()
            .patch("/agent/prompts/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agent.prompts.patch("id", [
            {
                op: "replace",
                path: "/name",
                value: "Updated Agent Name",
            },
            {
                op: "add",
                path: "/tags/-",
                value: "new-tag",
            },
            {
                op: "remove",
                path: "/description",
            },
        ]);
        expect(response).toEqual({
            success: true,
            message: "Prompt created successfully",
            data: {
                id: "prompt_123",
                name: "Medical Assistant System Prompt",
                description: "System prompt for medical assistant agent",
                content: "You are a helpful medical assistant...",
                is_default: false,
                is_active: true,
                tags: ["medical", "system"],
            },
        });
    });

    test("loadDefaults", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, message: "Operation completed successfully" };
        server
            .mockEndpoint()
            .post("/agent/prompts/load-defaults")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agent.prompts.loadDefaults();
        expect(response).toEqual({
            success: true,
            message: "Operation completed successfully",
        });
    });
});
