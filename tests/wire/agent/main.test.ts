/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { phenomlClient } from "../../../src/Client";

describe("Agent", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", prompts: ["prompt_123", "prompt_456"], is_active: true };
        const rawResponseBody = {
            success: true,
            message: "Agent created successfully",
            data: {
                id: "agent_123",
                name: "Medical Assistant",
                description: "An AI assistant for medical information processing",
                prompts: ["prompt_123", "prompt_456"],
                is_active: true,
                tags: ["medical", "fhir"],
                provider: "medplum",
                meta: { fhir_store_id: "my-fhir-store", instance_name: "sandbox" },
            },
        };
        server
            .mockEndpoint()
            .post("/agent/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agent.create({
            name: "name",
            prompts: ["prompt_123", "prompt_456"],
            is_active: true,
        });
        expect(response).toEqual({
            success: true,
            message: "Agent created successfully",
            data: {
                id: "agent_123",
                name: "Medical Assistant",
                description: "An AI assistant for medical information processing",
                prompts: ["prompt_123", "prompt_456"],
                is_active: true,
                tags: ["medical", "fhir"],
                provider: "medplum",
                meta: {
                    fhir_store_id: "my-fhir-store",
                    instance_name: "sandbox",
                },
            },
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "Agents retrieved successfully",
            agents: [
                {
                    id: "agent_123",
                    name: "Medical Assistant",
                    description: "An AI assistant for medical information processing",
                    prompts: ["prompt_123", "prompt_456"],
                    is_active: true,
                    tags: ["medical", "fhir"],
                    provider: "medplum",
                    meta: { fhir_store_id: "my-fhir-store", instance_name: "sandbox" },
                },
            ],
        };
        server.mockEndpoint().get("/agent/list").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agent.list();
        expect(response).toEqual({
            success: true,
            message: "Agents retrieved successfully",
            agents: [
                {
                    id: "agent_123",
                    name: "Medical Assistant",
                    description: "An AI assistant for medical information processing",
                    prompts: ["prompt_123", "prompt_456"],
                    is_active: true,
                    tags: ["medical", "fhir"],
                    provider: "medplum",
                    meta: {
                        fhir_store_id: "my-fhir-store",
                        instance_name: "sandbox",
                    },
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "Agent created successfully",
            data: {
                id: "agent_123",
                name: "Medical Assistant",
                description: "An AI assistant for medical information processing",
                prompts: ["prompt_123", "prompt_456"],
                is_active: true,
                tags: ["medical", "fhir"],
                provider: "medplum",
                meta: { fhir_store_id: "my-fhir-store", instance_name: "sandbox" },
            },
        };
        server.mockEndpoint().get("/agent/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agent.get("id");
        expect(response).toEqual({
            success: true,
            message: "Agent created successfully",
            data: {
                id: "agent_123",
                name: "Medical Assistant",
                description: "An AI assistant for medical information processing",
                prompts: ["prompt_123", "prompt_456"],
                is_active: true,
                tags: ["medical", "fhir"],
                provider: "medplum",
                meta: {
                    fhir_store_id: "my-fhir-store",
                    instance_name: "sandbox",
                },
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            success: true,
            message: "Agent created successfully",
            data: {
                id: "agent_123",
                name: "Medical Assistant",
                description: "An AI assistant for medical information processing",
                prompts: ["prompt_123", "prompt_456"],
                is_active: true,
                tags: ["medical", "fhir"],
                provider: "medplum",
                meta: { fhir_store_id: "my-fhir-store", instance_name: "sandbox" },
            },
        };
        server
            .mockEndpoint()
            .put("/agent/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agent.update("id");
        expect(response).toEqual({
            success: true,
            message: "Agent created successfully",
            data: {
                id: "agent_123",
                name: "Medical Assistant",
                description: "An AI assistant for medical information processing",
                prompts: ["prompt_123", "prompt_456"],
                is_active: true,
                tags: ["medical", "fhir"],
                provider: "medplum",
                meta: {
                    fhir_store_id: "my-fhir-store",
                    instance_name: "sandbox",
                },
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, message: "Agent deleted successfully" };
        server.mockEndpoint().delete("/agent/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.agent.delete("id");
        expect(response).toEqual({
            success: true,
            message: "Agent deleted successfully",
        });
    });

    test("patch", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = [
            { op: "replace", path: "/name", value: "Updated Agent Name" },
            { op: "add", path: "/tags/-", value: "new-tag" },
            { op: "remove", path: "/description" },
        ];
        const rawResponseBody = {
            success: true,
            message: "Agent created successfully",
            data: {
                id: "agent_123",
                name: "Medical Assistant",
                description: "An AI assistant for medical information processing",
                prompts: ["prompt_123", "prompt_456"],
                is_active: true,
                tags: ["medical", "fhir"],
                provider: "medplum",
                meta: { fhir_store_id: "my-fhir-store", instance_name: "sandbox" },
            },
        };
        server
            .mockEndpoint()
            .patch("/agent/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agent.patch("id", [
            {
                op: "replace",
                path: "/name",
                value: "Updated Agent Name",
            },
            {
                op: "add",
                path: "/tags/-",
                value: "new-tag",
            },
            {
                op: "remove",
                path: "/description",
            },
        ]);
        expect(response).toEqual({
            success: true,
            message: "Agent created successfully",
            data: {
                id: "agent_123",
                name: "Medical Assistant",
                description: "An AI assistant for medical information processing",
                prompts: ["prompt_123", "prompt_456"],
                is_active: true,
                tags: ["medical", "fhir"],
                provider: "medplum",
                meta: {
                    fhir_store_id: "my-fhir-store",
                    instance_name: "sandbox",
                },
            },
        });
    });

    test("chat", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { message: "What is the patient's current condition?", agent_id: "agent-123" };
        const rawResponseBody = {
            response: "I'll create a patient record for John Doe with diabetes. Let me process that information...",
            success: true,
            message: "Chat response generated successfully",
            session_id: "session_123",
        };
        server
            .mockEndpoint()
            .post("/agent/chat")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agent.chat({
            message: "What is the patient's current condition?",
            agent_id: "agent-123",
        });
        expect(response).toEqual({
            response: "I'll create a patient record for John Doe with diabetes. Let me process that information...",
            success: true,
            message: "Chat response generated successfully",
            session_id: "session_123",
        });
    });
});
