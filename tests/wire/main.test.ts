/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { phenomlClient } from "../../src/Client";

describe("phenomlClient", () => {
    test("createFhirResourceFromText", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            version: "R4",
            resource: "auto",
            text: "Patient has severe asthma with acute exacerbation",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/lang2fhir/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.createFhirResourceFromText({
            version: "R4",
            resource: "auto",
            text: "Patient has severe asthma with acute exacerbation",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("generateFhirSearchParametersFromText", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "Appointments between March 2-9, 2025" };
        const rawResponseBody = { resourceType: "Appointment", searchParams: "date=ge2025-03-02&date=le2025-03-09" };
        server
            .mockEndpoint()
            .post("/lang2fhir/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.generateFhirSearchParametersFromText({
            text: "Appointments between March 2-9, 2025",
        });
        expect(response).toEqual({
            resourceType: "Appointment",
            searchParams: "date=ge2025-03-02&date=le2025-03-09",
        });
    });

    test("uploadCustomFhirProfile", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { version: "version", resource: "custom-patient", profile: "profile" };
        const rawResponseBody = {
            message: "Profile uploaded successfully",
            id: "0ofoiy2o7a3pvwj",
            resource: "custom-patient",
            version: "4.0.1",
            url: "http://phenoml.com/fhir/StructureDefinition/custom-patient",
        };
        server
            .mockEndpoint()
            .post("/lang2fhir/profile/upload")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.uploadCustomFhirProfile({
            version: "version",
            resource: "custom-patient",
            profile: "profile",
        });
        expect(response).toEqual({
            message: "Profile uploaded successfully",
            id: "0ofoiy2o7a3pvwj",
            resource: "custom-patient",
            version: "4.0.1",
            url: "http://phenoml.com/fhir/StructureDefinition/custom-patient",
        });
    });

    test("convertDocumentToFhirResource", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            version: "R4",
            resource: "questionnaire",
            content: "content",
            fileType: "application/pdf",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/lang2fhir/document")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.convertDocumentToFhirResource({
            version: "R4",
            resource: "questionnaire",
            content: "content",
            fileType: "application/pdf",
        });
        expect(response).toEqual({
            key: "value",
        });
    });
});
