/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { phenomlClient } from "../../../src/Client";

describe("Tools", () => {
    test("createFhirResource", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { resource: "auto", text: "Patient John Doe has severe asthma with acute exacerbation" };
        const rawResponseBody = {
            fhir_resource: {
                resourceType: "Condition",
                id: "condition-123",
                code: { coding: [{ system: "http://snomed.info/sct", code: "195967001", display: "Asthma" }] },
                subject: { reference: "Patient/patient-123", display: "John Doe" },
            },
            fhir_id: "condition-123",
            success: true,
            message: "FHIR resource created and stored in FHIR server successfully",
        };
        server
            .mockEndpoint()
            .post("/tools/lang2fhir-and-create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.createFhirResource({
            resource: "auto",
            text: "Patient John Doe has severe asthma with acute exacerbation",
        });
        expect(response).toEqual({
            fhir_resource: {
                resourceType: "Condition",
                id: "condition-123",
                code: {
                    coding: [
                        {
                            system: "http://snomed.info/sct",
                            code: "195967001",
                            display: "Asthma",
                        },
                    ],
                },
                subject: {
                    reference: "Patient/patient-123",
                    display: "John Doe",
                },
            },
            fhir_id: "condition-123",
            success: true,
            message: "FHIR resource created and stored in FHIR server successfully",
        });
    });

    test("searchFhirResources", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "Find all appointments for patient John Doe next week" };
        const rawResponseBody = {
            resource_type: "Appointment",
            search_params: "patient=Patient/patient-123&date=ge2024-01-15&date=le2024-01-22",
            fhir_results: [
                {
                    resourceType: "Appointment",
                    id: "appointment-123",
                    status: "booked",
                    start: "2024-01-16T10:00:00Z",
                    end: "2024-01-16T11:00:00Z",
                    participant: [{ actor: { reference: "Patient/patient-123", display: "John Doe" } }],
                },
            ],
            success: true,
            message: "Search query generated and executed in FHIR server successfully. Found 1 results.",
        };
        server
            .mockEndpoint()
            .post("/tools/lang2fhir-and-search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.searchFhirResources({
            text: "Find all appointments for patient John Doe next week",
        });
        expect(response).toEqual({
            resource_type: "Appointment",
            search_params: "patient=Patient/patient-123&date=ge2024-01-15&date=le2024-01-22",
            fhir_results: [
                {
                    resourceType: "Appointment",
                    id: "appointment-123",
                    status: "booked",
                    start: "2024-01-16T10:00:00Z",
                    end: "2024-01-16T11:00:00Z",
                    participant: [
                        {
                            actor: {
                                reference: "Patient/patient-123",
                                display: "John Doe",
                            },
                        },
                    ],
                },
            ],
            success: true,
            message: "Search query generated and executed in FHIR server successfully. Found 1 results.",
        });
    });

    test("analyzeCohort", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {
            text: "female patients over 20 with diabetes but not hypertension",
            provider: "medplum",
        };
        const rawResponseBody = {
            success: true,
            message: "Cohort analysis completed successfully. Found 33 patients from 2 search concepts.",
            patientIds: ["patient-123", "patient-456", "patient-789"],
            patientCount: 33,
            queries: [
                {
                    resource_type: "Patient",
                    search_params: "gender=female&birthdate=le2004-01-01",
                    concept: "female patients over 20",
                    exclude: false,
                },
                {
                    resource_type: "Condition",
                    search_params: "code=55822004",
                    concept: "hyperlipidemia",
                    exclude: false,
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/tools/cohort")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.analyzeCohort({
            text: "female patients over 20 with diabetes but not hypertension",
            provider: "medplum",
        });
        expect(response).toEqual({
            success: true,
            message: "Cohort analysis completed successfully. Found 33 patients from 2 search concepts.",
            patientIds: ["patient-123", "patient-456", "patient-789"],
            patientCount: 33,
            queries: [
                {
                    resource_type: "Patient",
                    search_params: "gender=female&birthdate=le2004-01-01",
                    concept: "female patients over 20",
                    exclude: false,
                },
                {
                    resource_type: "Condition",
                    search_params: "code=55822004",
                    concept: "hyperlipidemia",
                    exclude: false,
                },
            ],
        });
    });
});
