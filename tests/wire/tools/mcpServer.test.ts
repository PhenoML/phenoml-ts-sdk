/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { phenomlClient } from "../../../src/Client";

describe("McpServer", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "My MCP Server", mcp_server_url: "https://mcp.example.com" };
        const rawResponseBody = {
            success: true,
            message: "MCP server created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server",
                description: "My MCP Server is a server that provides MCP services",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        };
        server
            .mockEndpoint()
            .post("/tools/mcp-server/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.mcpServer.create({
            name: "My MCP Server",
            mcp_server_url: "https://mcp.example.com",
        });
        expect(response).toEqual({
            success: true,
            message: "MCP server created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server",
                description: "My MCP Server is a server that provides MCP services",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "MCP server created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server",
                description: "My MCP Server is a server that provides MCP services",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        };
        server
            .mockEndpoint()
            .get("/tools/mcp-server/list")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.mcpServer.list();
        expect(response).toEqual({
            success: true,
            message: "MCP server created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server",
                description: "My MCP Server is a server that provides MCP services",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "MCP server created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server",
                description: "My MCP Server is a server that provides MCP services",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        };
        server
            .mockEndpoint()
            .get("/tools/mcp-server/mcp_server_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.mcpServer.get("mcp_server_id");
        expect(response).toEqual({
            success: true,
            message: "MCP server created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server",
                description: "My MCP Server is a server that provides MCP services",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "MCP server created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server",
                description: "My MCP Server is a server that provides MCP services",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        };
        server
            .mockEndpoint()
            .delete("/tools/mcp-server/mcp_server_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.mcpServer.delete("mcp_server_id");
        expect(response).toEqual({
            success: true,
            message: "MCP server created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server",
                description: "My MCP Server is a server that provides MCP services",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        });
    });
});
