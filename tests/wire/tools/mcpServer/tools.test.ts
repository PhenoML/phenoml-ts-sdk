/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { phenomlClient } from "../../../../src/Client";

describe("Tools", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "MCP server tool created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server Tool",
                description: "My MCP Server Tool is a tool that provides MCP services",
                input_schema: { name: "string", age: "number" },
                mcp_server_id: "123",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        };
        server
            .mockEndpoint()
            .get("/tools/mcp-server/mcp_server_id/list")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.mcpServer.tools.list("mcp_server_id");
        expect(response).toEqual({
            success: true,
            message: "MCP server tool created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server Tool",
                description: "My MCP Server Tool is a tool that provides MCP services",
                input_schema: {
                    name: "string",
                    age: "number",
                },
                mcp_server_id: "123",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "MCP server tool created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server Tool",
                description: "My MCP Server Tool is a tool that provides MCP services",
                input_schema: { name: "string", age: "number" },
                mcp_server_id: "123",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        };
        server
            .mockEndpoint()
            .get("/tools/mcp-server/tool/mcp_server_tool_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.mcpServer.tools.get("mcp_server_tool_id");
        expect(response).toEqual({
            success: true,
            message: "MCP server tool created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server Tool",
                description: "My MCP Server Tool is a tool that provides MCP services",
                input_schema: {
                    name: "string",
                    age: "number",
                },
                mcp_server_id: "123",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "MCP server tool created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server Tool",
                description: "My MCP Server Tool is a tool that provides MCP services",
                input_schema: { name: "string", age: "number" },
                mcp_server_id: "123",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        };
        server
            .mockEndpoint()
            .delete("/tools/mcp-server/tool/mcp_server_tool_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.mcpServer.tools.delete("mcp_server_tool_id");
        expect(response).toEqual({
            success: true,
            message: "MCP server tool created successfully",
            data: {
                id: "123",
                user_id: "123",
                name: "My MCP Server Tool",
                description: "My MCP Server Tool is a tool that provides MCP services",
                input_schema: {
                    name: "string",
                    age: "number",
                },
                mcp_server_id: "123",
                mcp_server_url: "https://mcp.example.com",
                is_active: true,
            },
        });
    });

    test("call", async () => {
        const server = mockServerPool.createServer();
        const client = new phenomlClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { arguments: { title: "PhenoML Agent API" } };
        const rawResponseBody = {
            success: true,
            message: "MCP server tool called successfully",
            result: { content: [{ type: "text", text: '{"endpoint_data": "example"}' }] },
            error: "Failed to call MCP server tool",
        };
        server
            .mockEndpoint()
            .post("/tools/mcp-server/tool/mcp_server_tool_id/call")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.mcpServer.tools.call("mcp_server_tool_id", {
            arguments: {
                title: "PhenoML Agent API",
            },
        });
        expect(response).toEqual({
            success: true,
            message: "MCP server tool called successfully",
            result: {
                content: [
                    {
                        type: "text",
                        text: '{"endpoint_data": "example"}',
                    },
                ],
            },
            error: "Failed to call MCP server tool",
        });
    });
});
